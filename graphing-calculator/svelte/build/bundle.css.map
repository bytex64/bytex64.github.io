{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Display.svelte",
    "../../Polynomial.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Polynomial from './Polynomial.svelte';\n  import Display from './Display.svelte';\n\n  let func;\n\n  async function polynomialChanged(event) {\n    const p = event.detail;\n    func = new Function('x', `return ${p.a} * x * x + ${p.b} * x + ${p.c}`);\n  }\n</script>\n\n<main>\n  <h1>Graphing Calculator</h1>\n  <Polynomial on:polynomialChanged={ polynomialChanged }/>\n  <Display func={ func }/>\n</main>\n\n<style>\nmain {\n  font-family: sans-serif;\n}\n</style>\n",
    "<script>\n  import { onMount, afterUpdate } from 'svelte';\n  export let func;\n  let canvas, ctx;;\n\n  onMount(() => {\n    canvas.width = 1000;\n    canvas.height = 1000;\n    ctx = canvas.getContext('2d');\n    // scale and move the origin\n    ctx.scale(1000 / 20, 1000 / 20);\n    ctx.translate(10, 10);\n    // flip the axis\n    ctx.scale(1, -1);\n    ctx.lineWidth = 0.05;\n  });\n\n  function redraw() {\n    if (!func) return;\n    ctx.fillStyle = 'white';\n    ctx.fillRect(-10, -10, 20, 20);\n\n    ctx.strokeStyle = 'black';\n\n    // X axis\n    ctx.beginPath();\n    ctx.moveTo(0, -10);\n    ctx.lineTo(0, 10);\n    ctx.stroke();\n\n    // X ticks\n    for (let x = -10; x <= 10; x++) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, 0.1);\n      ctx.stroke();\n    }\n\n    // Y axis\n    ctx.beginPath();\n    ctx.moveTo(-10, 0);\n    ctx.lineTo(10, 0);\n    ctx.stroke();\n\n    // Y ticks\n    for (let y = -10; y <= 10; y++) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(0.1, y);\n      ctx.stroke();\n    }\n\n    // Draw the function\n    ctx.strokeStyle = 'blue';\n    ctx.beginPath();\n    ctx.moveTo(-10, func(-10));\n    for (let x = -9.9; x <= 10; x += 0.1) {\n      ctx.lineTo(x, func(x));\n    }\n    ctx.stroke();\n  }\n\n  afterUpdate(redraw);\n</script>\n\n<canvas class=\"display\" bind:this={canvas}></canvas>\n\n<style>\n.display {\n  width: 500px;\n  height: 500px;\n  border: 1px solid black;\n}\n</style>\n",
    "<script>\n  import { afterUpdate, createEventDispatcher, tick } from 'svelte';\n\n  let a = \"0.5\",\n      b = \"0\",\n      c = \"-3\";\n\n  const dispatch = createEventDispatcher();\n\n  function notifyPolynomialChanged() {\n    dispatch('polynomialChanged', {\n      a: parseFloat(a),\n      b: parseFloat(b),\n      c: parseFloat(c),\n    });\n  }\n\n  afterUpdate(async () => {\n    // waiting for a tick makes this update work after mounting as well\n    await tick();\n    notifyPolynomialChanged();\n  });\n</script>\n\n<p class=\"polynomial\">\n  <input type=\"text\" bind:value={a} /><i>x<sup>2</sup></i>\n  + <input type=\"text\" bind:value={b} /><i>x</i>\n  + <input type=\"text\" bind:value={c} />\n</p>\n\n<style>\np.polynomial {\n  font-size: 24px;\n  font-family: serif;\n}\n\ninput {\n  font-size: 24px;\n  width: 32px;\n  text-align: right;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAmBA,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,UAAU,AACzB,CAAC;AC+CD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AACzB,CAAC;ACzCD,CAAC,WAAW,cAAC,CAAC,AACZ,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,AACnB,CAAC"
}